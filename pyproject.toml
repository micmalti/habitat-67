[build-system]
requires = ["setuptools>=77.0.3", "wheel", "setuptools-git-versioning>=2.0"]
build-backend = "setuptools.build_meta"

[project]
name = "habitat-67"
dynamic = ["version"]
description = "A liveable city from the distant past"
readme = {file = "README.md", content-type = "text/markdown"}
requires-python = ">=3.12.0"
dependencies = [
  "pandas",
  "requests",
  "lxml"
]
license = "MIT"
license-files = ["LICEN[CS]E.*"]
authors = [
    { name = "Michael Gauci", email = "michaelgauci.mt@gmail.com"}
]
keywords = [
    # # "python",
    ## "urban",
    ## "design",
    ## "demo"
    #
]
classifiers = [
    # "Topic ::  ",  # available options: https://pypi.org/classifiers/
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
]

[project.urls]
Homepage = "https://github.com/micmalti/habitat-67"

# [project.scripts]
# habitat-67 = "habitat-67.main:main"

[dependency-groups]
dev = [
  "vale",
  "cruft",
  "ruff",
  "pytest",
  "pytest-cov",
  "hypothesis",
  "mkdocs",
  "mkdocs-material",
  "mkdocstrings-python",
  "mkdocs-minify-plugin",
  "mkdocs-git-revision-date-localized-plugin",
  "mkdocs-gen-files",
  "mkdocs-literate-nav",
  "mkdocs-section-index"
]
ci = [
  "ruff",
  "pytest",
  "pytest-cov",
  "hypothesis",
  "mutmut",
  "tox",
  "build",
  "twine",
  "mkdocs",
  "mkdocs-material",
  "mkdocstrings-python",
  "mkdocs-minify-plugin",
  "mkdocs-git-revision-date-localized-plugin",
  "mkdocs-gen-files",
  "mkdocs-literate-nav",
  "mkdocs-section-index"
]

[tool.pytest.ini_options]
pythonpath = [
  "src/habitat-67",
]
testpaths = "tests"
addopts = [
    "--import-mode=importlib",  # allow tox to run tests against installed version
    "--cov",  # provide coverage
    "--cov-config=pyproject.toml",
    "--cov-report=",
    "-v"  # enable verbose mode
]
markers = []
xfail_strict = true  # avoid overlooking passing tests marked as expected to fail

[tool.mutmut]
paths_to_mutate = [ "src/habitat-67/" ]
tests_dir = [ "tests/" ]

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_also = [
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
]

[tool.setuptools]
packages = ["src"]

[tool.setuptools-git-versioning]
enabled = true

[tool.cruft]
skip = ["cruft/__init__.py", "tests"]

