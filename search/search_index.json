{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"CHANGELOG/","title":"Release notes","text":"<p>All notable changes to this project are documented in this file, adhering to the formats proposed by Keep a Changelog 1.1 and Semantic Versioning 2.0.</p>"},{"location":"CONTRIBUTING/","title":"Contributor's Guide","text":"<p>Thank you for being interested in contributing to habitat-67!</p> <p>As an open source project, habitat-67 welcomes contributions of many forms. This guide lays out some general pointers pertaining the types of contribution available, so please start by reading it to get a sense of how contributing to this project works. If you have any questions, feel free to open a thread on GitHub Discussions.</p>"},{"location":"CONTRIBUTING/#checklist","title":"Checklist","text":"<p>Before interacting within the project, please take a moment to consider the following questions. By doing so, you can ensure that you are using the correct issue template and that you provide all necessary information when interacting with our community.</p> <p>Issues, discussions, and comments are forever</p> <p>Please note that everything you write is permanent and will remain for everyone to read \u2013 forever. Therefore, please always be nice and constructive, follow our contribution guidelines, and comply with our Code of Conduct.</p>"},{"location":"CONTRIBUTING/#before-creating-an-issue","title":"Before creating an issue","text":"<ul> <li>Are you using the appropriate issue template, or is there another issue template that better fits the context of your request?</li> <li>Have you checked if a similar bug report or change request has already been created, or have you stumbled upon something that might be related?</li> <li>Did your fill out every field as requested and did you provide any additional information that we maintainers need to comprehend your request?</li> </ul>"},{"location":"CONTRIBUTING/#before-asking-a-question","title":"Before asking a question","text":"<ul> <li>Is the topic a question for our discussion board, or is it a bug report or change request that should better be raised on our issue tracker?</li> <li>Is there an open discussion on the topic of your request? If the answer is yes, does your question match the direction of the discussion, or should you open a new discussion?</li> <li>Did your provide our community with all the necessary information to understand your question and help you quickly, or can you make it easier to help you?</li> </ul>"},{"location":"CONTRIBUTING/#before-commenting","title":"Before commenting","text":"<ul> <li>Is your comment relevant to the topic of the current page, post, issue, or discussion, or is it a better idea to create a new issue or discussion?</li> <li>Does your comment add value to the conversation? Is it constructive and respectful to our community and us maintainers? Could you just use a reaction instead? Use reactions to say thanks as this reduces the noise for moderators and people who are involved in a thread.</li> </ul>"},{"location":"CONTRIBUTING/#questions","title":"Questions","text":"<p>The GitHub issue tracker is for bug reports and feature requests. Please do not use it to ask questions about how to use habitat-67. These questions should instead be directed to GitHub Discussions.</p>"},{"location":"CONTRIBUTING/#code-of-conduct","title":"Code of Conduct","text":"<p>Everyone participating in this project is encouraged to be familiar with and uphold the Code of Conduct, which helps guide our collaborative efforts. Your participation signifies your agreement to its principles.</p>"},{"location":"CONTRIBUTING/#reporting-bugs","title":"Reporting Bugs","text":""},{"location":"CONTRIBUTING/#good-reporting-practices","title":"Good Reporting Practices","text":"<p>Please be aware of the following things when filing bug reports:</p> <ul> <li>Avoid raising duplicate issues. Please use the GitHub issue search feature to check whether your bug report or feature request has been mentioned in the past. Duplicate bug reports and feature requests are a huge maintenance burden on the limited resources of the project.</li> <li>When filing bug reports, be as thorough as possible. This means you should provide:<ul> <li>Guidance on how to reproduce the issue. Ideally, this should be a small code sample that can be run immediately by the maintainers. Failing that, let us know what you're doing, how often it happens, what environment you're using, etc. Be thorough: it prevents us needing to ask further questions.</li> <li>Tell us what you expected to happen. When we run your example code, what are we expecting to happen? What does \"success\" look like for your code?</li> <li>Tell us what actually happens. It's not helpful for you to say \"it doesn't work\" or \"it fails\". Tell us how it fails.</li> <li>Specify what version of habitat-67 you are using, and the chosen mode of installation.</li> </ul> </li> </ul> <p>Issues that lack sufficient detail for reproducibility will be marked as <code>stale</code> and automatically closed within 48 hours unless more information is forthcoming.</p>"},{"location":"CONTRIBUTING/#suggesting-enhancements","title":"Suggesting Enhancements","text":""},{"location":"CONTRIBUTING/#contributing-code","title":"Contributing Code","text":"<p>We maintain a curated list of small issues suited to first-time or less experienced contributors, using the \u201ceasy pickings\u201d filter. These are strongly recommended for those contributors looking to make a contribution.</p> <p>Ideally, pull requests ought to be submitted in response to an open issue. This helps increase the specificity of your PR and will increase the likelihood that your contribution will be accepted.</p>"},{"location":"CONTRIBUTING/#setting-up-your-development-environment","title":"Setting Up Your Development Environment","text":"<p>Refer to the Getting Started section in the template documentation for details.</p>"},{"location":"CONTRIBUTING/#contribution-workflow","title":"Contribution Workflow","text":""},{"location":"CONTRIBUTING/#contribution-suitability","title":"Contribution Suitability","text":"<p>Project maintainers have the last word on whether a contribution is suitable for habitat-67. All contributions will be considered carefully, but from time to time, contributions will be rejected because they do not suit the current goals or needs of the project.</p>"},{"location":"level/","title":"Installation","text":"<p>This is a test</p>"},{"location":"level/usage_test/","title":"Usage","text":"<p>Another test</p>"},{"location":"reference/","title":"API reference","text":"<ul> <li>check_in<ul> <li>moneybase</li> <li>utils</li> </ul> </li> <li>crawlers<ul> <li>benzinga</li> <li>fidelity</li> <li>nasdaq</li> <li>yahoo_finance</li> </ul> </li> <li>project<ul> <li>moneybase</li> <li>utils</li> </ul> </li> <li>reputation<ul> <li>brand_equity</li> <li>employer_ratings</li> <li>esg_rankings</li> <li>negative_press</li> </ul> </li> </ul>"},{"location":"reference/check_in/","title":"Check in","text":""},{"location":"reference/check_in/#check_in","title":"check_in","text":"<p>Hey</p>"},{"location":"reference/check_in/moneybase/","title":"Moneybase","text":""},{"location":"reference/check_in/moneybase/#check_in.moneybase","title":"moneybase","text":"<p>Another ok ghest</p>"},{"location":"reference/check_in/moneybase/#check_in.moneybase.TradingAccount","title":"TradingAccount","text":"<pre><code>TradingAccount(config: dict)\n</code></pre> <p>A wrapper for Moneybase API</p> Source code in <code>src/habitat-67/check_in/moneybase.py</code> <pre><code>def __init__(self, config: dict):\n  self.session = Session()\n  self.base_url = 'https://preapi.moneybase.com/authentication/v2'   #https://prelive.cctrader.com\n  self.config = config.moneybase\n  self.login()\n  self.get_user_access()\n</code></pre>"},{"location":"reference/check_in/utils/","title":"Utils","text":""},{"location":"reference/check_in/utils/#check_in.utils","title":"utils","text":"<p>Sa fl-a\u0127\u0127ar</p>"},{"location":"reference/check_in/utils/#check_in.utils.FileHandler","title":"FileHandler","text":"<pre><code>FileHandler(\n    file_header: list = None,\n    generator: Callable = None,\n    tag: str = \"\",\n    file_label: str = None,\n    delta: int = 1,\n    **kwargs,\n)\n</code></pre> <p>Initialize the object.</p> <p>Parameters:</p> Name Type Description Default <p>A <code>markdown.Markdown</code> instance.</p> required <p>The handlers container.</p> required <p>The autorefs plugin instance.</p> required Source code in <code>src/habitat-67/check_in/utils.py</code> <pre><code>def __init__(\n    self,\n    file_header: list = None,\n    generator: Callable = None,\n    tag: str = '',\n    file_label: str = None,\n    delta: int = 1,\n    **kwargs\n):\n    super(FileHandler, self).__init__(**kwargs)\n    self.file_header = file_header\n    self.generator = generator\n    self.tag = tag\n    self.file_label = file_label\n    self.delta = delta\n    self.file_timestamp = None\n    self.df = None\n</code></pre>"},{"location":"reference/check_in/utils/#check_in.utils.FileHandler(md)","title":"<code>md</code>","text":""},{"location":"reference/check_in/utils/#check_in.utils.FileHandler(handlers)","title":"<code>handlers</code>","text":""},{"location":"reference/check_in/utils/#check_in.utils.FileHandler(autorefs)","title":"<code>autorefs</code>","text":""},{"location":"reference/check_in/utils/#check_in.utils.FileHandler.update","title":"update  <code>property</code>","text":"<pre><code>update: None\n</code></pre> <p>Update a file if necessary, and load its contents into memory</p>"},{"location":"reference/check_in/utils/#check_in.utils.ReprexConfig","title":"ReprexConfig  <code>dataclass</code>","text":"<pre><code>ReprexConfig(\n    editor: Optional[str] = (None,),\n    advertise: Optional[bool] = (None,),\n    session_info: bool = (False,),\n    style: bool = (False,),\n    prompt: str = (\"\",),\n    continuation: str = (\"\",),\n    comment: str = (\"#&gt;\",),\n    keep_old_results: bool = (False,),\n    input_prompt: Optional[str] = (None,),\n    input_continuation: Optional[str] = (None,),\n    input_comment: Optional[str] = (None,),\n)\n</code></pre> <p>Configuration dataclass for reprexlite. Used to configure input parsing and output formatting.</p>"},{"location":"reference/check_in/utils/#check_in.utils.SessionHandler","title":"SessionHandler","text":"<pre><code>SessionHandler(**kwargs)\n</code></pre> <p>Our \"autodoc\" Markdown block processor.</p> <p>It has a [<code>test</code> method][beepop.check_in.moneybase.TradingAccount] that tells if a block matches a criterion, and a [<code>run</code> method][beepop.check_in.moneybase.TradingAccount] that processes it.</p> <p>It also has utility methods allowing to get handlers and their configuration easily, useful when processing a matched block.</p> Source code in <code>src/habitat-67/check_in/utils.py</code> <pre><code>def __init__(self, **kwargs):\n    super(SessionHandler, self).__init__(**kwargs)\n    self.session = self.create_session()\n</code></pre>"},{"location":"reference/check_in/utils/#check_in.utils.SessionHandler.create_session","title":"create_session","text":"<pre><code>create_session(headers=None, url=None) -&gt; Session\n</code></pre> <p>Return a Requests session with the appropriate headers</p> Source code in <code>src/habitat-67/check_in/utils.py</code> <pre><code>def create_session(headers=None, url=None) -&gt; Session:\n    '''Return a Requests session with the appropriate headers'''\n\n    headers = {\n            'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:98.0) Gecko/20100101 Firefox/98.0',\n            # 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',\n            'Accept': '*/*',\n            'Accept-Language': 'en-US,en;q=0.5',\n            'Connection': 'keep-alive',\n            'Upgrade-Insecure-Requests': '1',\n            'Sec-Fetch-Dest': 'document',\n            'Sec-Fetch-Mode': 'navigate',\n            'Sec-Fetch-Site': 'none',         # specifies the request source (user-initiated, in this case) for the server to decide if it should be allowed\n            'Sec-Fetch-User': '?1',\n            'Pragma': 'no-cache',             # for backwards compatibility with the HTTP/1.0 caches that do not have a Cache-Control HTTP/1.1 header\n            'Cache-Control': 'no-cache',      # forces caches to submit the request to the origin server for validation before a cached copy is released\n    }\n    session = Session()\n    session.headers.update(headers)\n    if url:\n        session.get(url)\n    return session\n</code></pre>"},{"location":"reference/check_in/utils/#check_in.utils.datetime_from_midnight","title":"datetime_from_midnight","text":"<pre><code>datetime_from_midnight(\n    dt=None, timezone=\"UTC\", day_offset=None\n)\n</code></pre> <p>Return a datetime object for a given date at midnight</p> Source code in <code>src/habitat-67/check_in/utils.py</code> <pre><code>def datetime_from_midnight(dt=None, timezone='UTC', day_offset=None):\n    '''Return a datetime object for a given date at midnight'''\n\n    if dt is None:\n        dt = datetime.now()\n    elif not isinstance(dt, date):\n        dt = datetime.utcfromtimestamp(int(dt))\n    tz = pytz.timezone(timezone)\n    dt = tz.localize(dt.replace(minute=0, hour=0, second=0, microsecond=0, tzinfo=None))\n    if day_offset:\n        return (dt - timedelta(days=day_offset))\n    return dt\n</code></pre>"},{"location":"reference/check_in/utils/#check_in.utils.delta_in_days","title":"delta_in_days","text":"<pre><code>delta_in_days(\n    timestamp: str | int | datetime,\n    reference: str | int | datetime = None,\n)\n</code></pre> <p>Evaluate how recent a timestamp is relative to a reference date, or to the present time</p> Source code in <code>src/habitat-67/check_in/utils.py</code> <pre><code>def delta_in_days(timestamp: str | int | datetime, reference: str | int | datetime = None):\n    '''Evaluate how recent a timestamp is relative to a reference date, or to the present time'''\n\n    if not isinstance(timestamp, date):\n        timestamp = datetime.utcfromtimestamp(int(timestamp))\n    if reference is None:\n        reference = datetime.now()\n    else:\n        if not isinstance(reference, date):\n            reference = datetime.utcfromtimestamp(int(reference))\n    return abs((timestamp - reference).days)\n</code></pre>"},{"location":"reference/check_in/utils/#check_in.utils.extract_value","title":"extract_value","text":"<pre><code>extract_value(fragment, xpath)\n</code></pre> <p>Extract data from an HTML fragment using an XPath expression</p> Source code in <code>src/habitat-67/check_in/utils.py</code> <pre><code>def extract_value(fragment, xpath):\n    '''Extract data from an HTML fragment using an XPath expression'''\n\n    container = fragment.xpath(xpath)\n    if container:\n        return container[0].text\n    return None\n</code></pre>"},{"location":"reference/check_in/utils/#check_in.utils.flatten_dict","title":"flatten_dict","text":"<pre><code>flatten_dict(input_dict: dict) -&gt; str\n</code></pre> <p>Convert a nested dictionary into a string</p> Source code in <code>src/habitat-67/check_in/utils.py</code> <pre><code>def flatten_dict(input_dict: dict) -&gt; str:\n    '''Convert a nested dictionary into a string'''\n\n    output_dict = {}\n    def flatten(d, parent=[]):\n        for k, v in d.items():\n            if type(v) is dict:\n                parent.append(k)\n                flatten(v, parent)\n                parent = []\n            else:\n                if len(parent) &gt; 1:\n                    k = parent[0] + ''.join([f'[{i}]' for i in parent[1:]]) + f'[{k}]'\n                elif len(parent) == 1:\n                    k = f'{parent[0]}[{k}]'\n                output_dict[k] = v\n    flatten(input_dict)\n    return output_dict\n</code></pre>"},{"location":"reference/check_in/utils/#check_in.utils.get_logger","title":"get_logger","text":"<pre><code>get_logger(name)\n</code></pre> <p>Print log info to console while saving to disk</p> Source code in <code>src/habitat-67/check_in/utils.py</code> <pre><code>def get_logger(name):\n    '''Print log info to console while saving to disk'''\n\n    log_format = '%(asctime)s %(name)-12s %(levelname)-8s %(message)s'\n    logging.basicConfig(\n        level=logging.INFO,\n        format=log_format,\n        datefmt='%m-%d %H:%M',\n        filename='cctraderbot.log',\n        filemode='a'\n    )\n    console = logging.StreamHandler()\n    console.setLevel(logging.INFO)\n    console.setFormatter(logging.Formatter(log_format))\n    logging.getLogger(name).addHandler(console)\n    return logging.getLogger(name)\n</code></pre>"},{"location":"reference/check_in/utils/#check_in.utils.market_status","title":"market_status","text":"<pre><code>market_status()\n</code></pre> <p>Return the current market status</p> Source code in <code>src/habitat-67/check_in/utils.py</code> <pre><code>def market_status():\n    '''Return the current market status'''\n\n    response = requests.get(url='https://finance.yahoo.com/', params=None, timeout=10)\n    tree = html.fromstring(response.content)\n    message = tree.xpath('//span[@data-id=\"mk-msg\"]/text()')\n    if 'open in' in message[0]:\n        return 'is_opening'\n    elif 'close in' in message[0]:\n        return 'open'\n    elif (not message) or ('closed' in message[0]):\n        return 'closed'\n    else:\n        return 'open'\n</code></pre>"},{"location":"reference/check_in/utils/#check_in.utils.path_to_file","title":"path_to_file","text":"<pre><code>path_to_file(filename: str = '', subdir: str = '')\n</code></pre> <p>Return the absolute path for the application's data directory</p> Source code in <code>src/habitat-67/check_in/utils.py</code> <pre><code>def path_to_file(filename: str = '', subdir: str = ''):\n    '''Return the absolute path for the application's data directory'''\n\n    root_dir = Path(__file__).parent\n    return os.path.join(root_dir, 'data', subdir, filename)\n</code></pre>"},{"location":"reference/check_in/utils/#check_in.utils.previous_and_next","title":"previous_and_next","text":"<pre><code>previous_and_next(iterable)\n</code></pre> <p>Access previous and next values in a loop, based on @nosklo's response to StackOverflow #1011938</p> Source code in <code>src/habitat-67/check_in/utils.py</code> <pre><code>def previous_and_next(iterable):\n    '''Access previous and next values in a loop, based on @nosklo's response to StackOverflow #1011938'''\n\n    previous_item, item, next_item = tee(iterable, 3)\n    previous_item = chain([None], previous_item)\n    next_item = chain(islice(next_item, 1, None), [None])\n    return zip(previous_item, item, next_item)\n</code></pre>"},{"location":"reference/check_in/utils/#check_in.utils.text_to_num","title":"text_to_num","text":"<pre><code>text_to_num(text: str) -&gt; int\n</code></pre> <p>Convert an abbreviated number to the full number</p> Source code in <code>src/habitat-67/check_in/utils.py</code> <pre><code>def text_to_num(text: str) -&gt; int:\n    '''Convert an abbreviated number to the full number'''\n\n    switcher = {\n        'K': 1000,\n        'M': 1000000,\n        'B': 1000000000,\n        'T': 1000000000000\n    }\n    if not re.search(r'\\d+(?:\\.\\d+)?', text):\n        return None\n    value = re.findall(r'\\d+(?:\\.\\d+)?', text)[0]\n    unit = re.findall(r'[a-zA-Z]', text)[0]\n    return int(float(value) * switcher.get(unit, 1))\n</code></pre>"},{"location":"reference/crawlers/","title":"Crawlers","text":""},{"location":"reference/crawlers/#crawlers","title":"crawlers","text":""},{"location":"reference/crawlers/benzinga/","title":"Benzinga","text":""},{"location":"reference/crawlers/benzinga/#crawlers.benzinga","title":"benzinga","text":""},{"location":"reference/crawlers/benzinga/#crawlers.benzinga.Benzinga","title":"Benzinga","text":"<pre><code>Benzinga()\n</code></pre> <p>               Bases: <code>SessionHandler</code></p> Source code in <code>src/habitat-67/crawlers/benzinga.py</code> <pre><code>def __init__(self):\n    super(Benzinga, self).__init__()\n    self.call = self.call_initialiser(calls=1, period=3)\n    self.session.headers.update({\n        'Accept': 'application/json, text/plain, */*'\n        # 'Origin': 'https://www.benzinga.com',\n        # 'Referer': 'https://www.benzinga.com/',\n        # 'Sec-Fetch-Dest': 'empty',\n        # 'Sec-Fetch-Mode': 'cors',\n        # 'Sec-Fetch-Site': 'same-site'\n    })\n</code></pre>"},{"location":"reference/crawlers/benzinga/#crawlers.benzinga.Benzinga.get_recommendations","title":"get_recommendations","text":"<pre><code>get_recommendations(\n    ticker: str = \"\", wanted_date: datetime = now()\n)\n</code></pre> <p>Fetch analyst recommendations and price targets</p> Source code in <code>src/habitat-67/crawlers/benzinga.py</code> <pre><code>def get_recommendations(self, ticker: str = '', wanted_date: datetime = datetime.now()):\n    '''Fetch analyst recommendations and price targets'''\n\n    params = {\n        'token': '',\n        'parameters': {\n            'date_from': f'{datetime.now():%Y-%m-%d}',\n            'date_to': f'{datetime.now():%Y-%m-%d}',\n            'tickers': ticker\n        },\n        'pagesize': 1000\n    }\n    data = self.call(\n        url='https://api.benzinga.com/api/v2.1/calendar/ratings',\n        params=flatten_dict(params),\n        response_type='json'\n    )\n    df = pd.json_normalize(data, record_path =['ratings'])\n    # print(df.head())\n    return df\n</code></pre>"},{"location":"reference/crawlers/fidelity/","title":"Fidelity","text":""},{"location":"reference/crawlers/fidelity/#crawlers.fidelity","title":"fidelity","text":""},{"location":"reference/crawlers/nasdaq/","title":"Nasdaq","text":""},{"location":"reference/crawlers/nasdaq/#crawlers.nasdaq","title":"nasdaq","text":""},{"location":"reference/crawlers/yahoo_finance/","title":"Yahoo finance","text":""},{"location":"reference/crawlers/yahoo_finance/#crawlers.yahoo_finance","title":"yahoo_finance","text":""},{"location":"reference/crawlers/yahoo_finance/#crawlers.yahoo_finance.YahooFinance","title":"YahooFinance","text":"<pre><code>YahooFinance()\n</code></pre> <p>               Bases: <code>SessionHandler</code></p> <p>Constructs and sends a :class:<code>Request &lt;Request&gt;</code>.</p> <p>:param method: method for the new :class:<code>Request</code> object: <code>GET</code>, <code>OPTIONS</code>, <code>HEAD</code>, <code>POST</code>, <code>PUT</code>, <code>PATCH</code>, or <code>DELETE</code>. :param url: URL for the new :class:<code>Request</code> object. :param params: (optional) Dictionary, list of tuples or bytes to send in the query string for the :class:<code>Request</code>. :param data: (optional) Dictionary, list of tuples, bytes, or file-like object to send in the body of the :class:<code>Request</code>. :param json: (optional) A JSON serializable Python object to send in the body of the :class:<code>Request</code>. :param headers: (optional) Dictionary of HTTP Headers to send with the :class:<code>Request</code>. :param cookies: (optional) Dict or CookieJar object to send with the :class:<code>Request</code>. :param files: (optional) Dictionary of <code>'name': file-like-objects</code> (or <code>{'name': file-tuple}</code>) for multipart encoding upload. <code>file-tuple</code> can be a 2-tuple <code>('filename', fileobj)</code>, 3-tuple <code>('filename', fileobj, 'content_type')</code> or a 4-tuple <code>('filename', fileobj, 'content_type', custom_headers)</code>, where <code>'content_type'</code> is a string defining the content type of the given file and <code>custom_headers</code> a dict-like object containing additional headers to add for the file. :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth. :param timeout: (optional) How many seconds to wait for the server to send data before giving up, as a float, or a :ref:<code>(connect timeout, read timeout) &lt;timeouts&gt;</code> tuple. :type timeout: float or tuple :param allow_redirects: (optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to <code>True</code>. :type allow_redirects: bool :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy. :param verify: (optional) Either a boolean, in which case it controls whether we verify     the server's TLS certificate, or a string, in which case it must be a path     to a CA bundle to use. Defaults to <code>True</code>. :param stream: (optional) if <code>False</code>, the response content will be immediately downloaded. :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair. :return: :class:<code>Response &lt;Response&gt;</code> object :rtype: requests.Response</p> <p>Usage::</p> <p>import requests req = requests.request('GET', 'https://httpbin.org/get') req  Source code in <code>src/habitat-67/crawlers/yahoo_finance.py</code> <pre><code>def __init__(self):\n    super(YahooFinance, self).__init__()\n    self.call = self.call_initialiser(calls=1, period=3)\n    self.__popup_handler()\n</code></pre>"},{"location":"reference/crawlers/yahoo_finance/#crawlers.yahoo_finance.YahooFinance.get_earnings_calendar","title":"get_earnings_calendar","text":"<pre><code>get_earnings_calendar(\n    start_date: datetime = None, end_date: datetime = None\n) -&gt; DataFrame\n</code></pre> <p>Retrieve company earnings dates (DEPRECATED)</p> Source code in <code>src/habitat-67/crawlers/yahoo_finance.py</code> <pre><code>def get_earnings_calendar(self, start_date: datetime = None, end_date: datetime = None) -&gt; pd.DataFrame:\n    '''Retrieve company earnings dates (DEPRECATED)'''\n\n    earnings_dates = list()\n    day_offset = 0\n    day_counter = abs((end_date - start_date).days)\n    while day_counter != day_offset:\n        wanted_date = start_date + timedelta(days=day_offset)\n        for reporting_company in self.__get_reporting_companies(wanted_date):\n            earnings_dates.extend(reporting_company)\n        day_offset += 1\n    df = pd.DataFrame(earnings_dates)\n    return df\n</code></pre>"},{"location":"reference/crawlers/yahoo_finance/#crawlers.yahoo_finance.YahooFinance.get_historical_prices","title":"get_historical_prices","text":"<pre><code>get_historical_prices(\n    ticker: str, start_date: str, end_date: str\n)\n</code></pre> <p>Retrieve split-adjusted, historical price data</p> Source code in <code>src/habitat-67/crawlers/yahoo_finance.py</code> <pre><code>def get_historical_prices(self, ticker: str, start_date: str, end_date: str):\n    '''Retrieve split-adjusted, historical price data'''\n\n    def add_event(df, event_type):\n        is_event = price_data['events'].get(event_type, None)\n        if is_event:\n            event_dict = {}\n            for _, dict in is_event.items():\n                amount, ex_date = dict.values()\n                event_dict[ex_date] = amount\n            df[event_type] = df['date'].map(event_dict)\n        else:\n            df[event_type] = np.nan\n\n    base_url = 'https://iquery.finance.yahoo.com/v8/finance/chart/'  # query1 uses HTTP/1.0 while query2 uses HTTP/1.1\n    url = f'{base_url}{ticker}'\n    params = {\n        'period1': int(start_date),\n        'period2': int(end_date),\n        'interval': '1d',\n        'includePrePost': False,\n        'events': 'div,splits'\n    }\n    response = self.get_request(url=url, params=params, response_type='json', calls=1 , period=4)\n    price_data = response['chart']['result'][0]\n    df = pd.DataFrame(price_data['indicators']['quote'][0])\n    df['date'] = np.array(price_data['timestamp'])\n    for event_type in ['dividends', 'splits']:\n        add_event(df, event_type)\n    df['date'] = pd.to_datetime(df['date'], unit='s').dt.strftime('%Y-%m-%d')\n    df.set_index('date', inplace=True)\n    df.to_csv(path_to_file('yahoo_finance.csv'), index_label=False)\n    return df\n</code></pre>"},{"location":"reference/project/","title":"Project","text":""},{"location":"reference/project/#project","title":"project","text":""},{"location":"reference/project/moneybase/","title":"Moneybase","text":""},{"location":"reference/project/moneybase/#project.moneybase","title":"moneybase","text":""},{"location":"reference/project/utils/","title":"Utils","text":""},{"location":"reference/project/utils/#project.utils","title":"utils","text":""},{"location":"reference/project/utils/#project.utils.FileHandler","title":"FileHandler","text":"<pre><code>FileHandler(\n    file_header: list = None,\n    generator: Callable = None,\n    tag: str = \"\",\n    file_label: str = None,\n    delta: int = 1,\n    **kwargs,\n)\n</code></pre> Source code in <code>src/habitat-67/project/utils.py</code> <pre><code>def __init__(self, file_header: list = None, generator: Callable = None, tag: str = '', file_label: str = None, delta: int = 1, **kwargs):\n    super(FileHandler, self).__init__(**kwargs)\n    self.file_header = file_header\n    self.generator = generator\n    self.tag = tag\n    self.file_label = file_label\n    self.delta = delta\n    self.file_timestamp = None\n    self.df = None\n</code></pre>"},{"location":"reference/project/utils/#project.utils.FileHandler.update","title":"update","text":"<pre><code>update(ticker: str = None) -&gt; None\n</code></pre> <p>Update a file if necessary, and load its contents into memory</p> Source code in <code>src/habitat-67/project/utils.py</code> <pre><code>def update(self, ticker: str = None) -&gt; None:\n    '''Update a file if necessary, and load its contents into memory'''\n\n    if ticker:\n        self.file_label = ticker\n    if self.__file_exists():\n        if self.__is_updated():\n            pass\n        else:\n            self.__rename_file()\n            self.save_latest_data()\n    else:\n        self.save_latest_data()\n    self.df = pd.read_csv(self.__path_to_file())\n    return\n</code></pre>"},{"location":"reference/project/utils/#project.utils.SessionHandler","title":"SessionHandler","text":"<pre><code>SessionHandler(**kwargs)\n</code></pre> Source code in <code>src/habitat-67/project/utils.py</code> <pre><code>def __init__(self, **kwargs):\n    super(SessionHandler, self).__init__(**kwargs)\n    self.session = self.create_session()\n</code></pre>"},{"location":"reference/project/utils/#project.utils.SessionHandler.create_session","title":"create_session","text":"<pre><code>create_session(headers=None, url=None) -&gt; Session\n</code></pre> <p>Return a Requests session with the appropriate headers</p> Source code in <code>src/habitat-67/project/utils.py</code> <pre><code>def create_session(headers=None, url=None) -&gt; Session:\n    '''Return a Requests session with the appropriate headers'''\n\n    headers = {\n            'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:98.0) Gecko/20100101 Firefox/98.0',\n            # 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',\n            'Accept': '*/*',\n            'Accept-Language': 'en-US,en;q=0.5',\n            'Connection': 'keep-alive',\n            'Upgrade-Insecure-Requests': '1',\n            'Sec-Fetch-Dest': 'document',\n            'Sec-Fetch-Mode': 'navigate',\n            'Sec-Fetch-Site': 'none',         # specifies the request source (user-initiated, in this case) for the server to decide if it should be allowed\n            'Sec-Fetch-User': '?1',\n            'Pragma': 'no-cache',             # for backwards compatibility with the HTTP/1.0 caches that do not have a Cache-Control HTTP/1.1 header\n            'Cache-Control': 'no-cache',      # forces caches to submit the request to the origin server for validation before a cached copy is released\n    }\n    session = Session()\n    session.headers.update(headers)\n    if url:\n        session.get(url)\n    return session\n</code></pre>"},{"location":"reference/project/utils/#project.utils.datetime_from_midnight","title":"datetime_from_midnight","text":"<pre><code>datetime_from_midnight(\n    dt=None, timezone=\"UTC\", day_offset=None\n)\n</code></pre> <p>Return a datetime object for a given date at midnight</p> Source code in <code>src/habitat-67/project/utils.py</code> <pre><code>def datetime_from_midnight(dt=None, timezone='UTC', day_offset=None):\n    '''Return a datetime object for a given date at midnight'''\n\n    if dt is None:\n        dt = datetime.now()\n    elif not isinstance(dt, date):\n        dt = datetime.utcfromtimestamp(int(dt))\n    tz = pytz.timezone(timezone)\n    dt = tz.localize(dt.replace(minute=0, hour=0, second=0, microsecond=0, tzinfo=None))\n    if day_offset:\n        return (dt - timedelta(days=day_offset))\n    return dt\n</code></pre>"},{"location":"reference/project/utils/#project.utils.delta_in_days","title":"delta_in_days","text":"<pre><code>delta_in_days(\n    timestamp: str | int | datetime,\n    reference: str | int | datetime = None,\n)\n</code></pre> <p>Evaluate how recent a timestamp is relative to a reference date, or to the present time</p> Source code in <code>src/habitat-67/project/utils.py</code> <pre><code>def delta_in_days(timestamp: str | int | datetime, reference: str | int | datetime = None):\n    '''Evaluate how recent a timestamp is relative to a reference date, or to the present time'''\n\n    if not isinstance(timestamp, date):\n        timestamp = datetime.utcfromtimestamp(int(timestamp))\n    if reference is None:\n        reference = datetime.now()\n    else:\n        if not isinstance(reference, date):\n            reference = datetime.utcfromtimestamp(int(reference))\n    return abs((timestamp - reference).days)\n</code></pre>"},{"location":"reference/project/utils/#project.utils.extract_value","title":"extract_value","text":"<pre><code>extract_value(fragment, xpath)\n</code></pre> <p>Extract data from an HTML fragment using an XPath expression</p> Source code in <code>src/habitat-67/project/utils.py</code> <pre><code>def extract_value(fragment, xpath):\n    '''Extract data from an HTML fragment using an XPath expression'''\n\n    container = fragment.xpath(xpath)\n    if container:\n        return container[0].text\n    return None\n</code></pre>"},{"location":"reference/project/utils/#project.utils.flatten_dict","title":"flatten_dict","text":"<pre><code>flatten_dict(input_dict: dict) -&gt; str\n</code></pre> <p>Convert a nested dictionary into a string</p> Source code in <code>src/habitat-67/project/utils.py</code> <pre><code>def flatten_dict(input_dict: dict) -&gt; str:\n    '''Convert a nested dictionary into a string'''\n\n    output_dict = {}\n    def flatten(d, parent=[]):\n        for k, v in d.items():\n            if type(v) is dict:\n                parent.append(k)\n                flatten(v, parent)\n                parent = []\n            else:\n                if len(parent) &gt; 1:\n                    k = parent[0] + ''.join([f'[{i}]' for i in parent[1:]]) + f'[{k}]'\n                elif len(parent) == 1:\n                    k = f'{parent[0]}[{k}]'\n                output_dict[k] = v\n    flatten(input_dict)\n    return output_dict\n</code></pre>"},{"location":"reference/project/utils/#project.utils.get_logger","title":"get_logger","text":"<pre><code>get_logger(name)\n</code></pre> <p>Print log info to console while saving to disk</p> Source code in <code>src/habitat-67/project/utils.py</code> <pre><code>def get_logger(name):\n    '''Print log info to console while saving to disk'''\n\n    log_format = '%(asctime)s %(name)-12s %(levelname)-8s %(message)s'\n    logging.basicConfig(\n        level=logging.INFO,\n        format=log_format,\n        datefmt='%m-%d %H:%M',\n        filename='cctraderbot.log',\n        filemode='a'\n    )\n    console = logging.StreamHandler()\n    console.setLevel(logging.INFO)\n    console.setFormatter(logging.Formatter(log_format))\n    logging.getLogger(name).addHandler(console)\n    return logging.getLogger(name)\n</code></pre>"},{"location":"reference/project/utils/#project.utils.market_status","title":"market_status","text":"<pre><code>market_status()\n</code></pre> <p>Return the current market status</p> Source code in <code>src/habitat-67/project/utils.py</code> <pre><code>def market_status():\n    '''Return the current market status'''\n\n    response = requests.get(url='https://finance.yahoo.com/', params=None, timeout=10)\n    tree = html.fromstring(response.content)\n    message = tree.xpath('//span[@data-id=\"mk-msg\"]/text()')\n    if 'open in' in message[0]:\n        return 'is_opening'\n    elif 'close in' in message[0]:\n        return 'open'\n    elif (not message) or ('closed' in message[0]):\n        return 'closed'\n    else:\n        return 'open'\n</code></pre>"},{"location":"reference/project/utils/#project.utils.path_to_file","title":"path_to_file","text":"<pre><code>path_to_file(filename: str = '', subdir: str = '')\n</code></pre> <p>Return the absolute path for the application's data directory</p> Source code in <code>src/habitat-67/project/utils.py</code> <pre><code>def path_to_file(filename: str = '', subdir: str = ''):\n    '''Return the absolute path for the application's data directory'''\n\n    root_dir = Path(__file__).parent\n    return os.path.join(root_dir, 'data', subdir, filename)\n</code></pre>"},{"location":"reference/project/utils/#project.utils.previous_and_next","title":"previous_and_next","text":"<pre><code>previous_and_next(iterable)\n</code></pre> <p>Access previous and next values in a loop, based on @nosklo's response to StackOverflow #1011938</p> Source code in <code>src/habitat-67/project/utils.py</code> <pre><code>def previous_and_next(iterable):\n    '''Access previous and next values in a loop, based on @nosklo's response to StackOverflow #1011938'''\n\n    previous_item, item, next_item = tee(iterable, 3)\n    previous_item = chain([None], previous_item)\n    next_item = chain(islice(next_item, 1, None), [None])\n    return zip(previous_item, item, next_item)\n</code></pre>"},{"location":"reference/project/utils/#project.utils.text_to_num","title":"text_to_num","text":"<pre><code>text_to_num(text)\n</code></pre> <p>Convert an abbreviated number to the full number</p> Source code in <code>src/habitat-67/project/utils.py</code> <pre><code>def text_to_num(text):\n    '''Convert an abbreviated number to the full number'''\n\n    switcher = {\n        'K': 1000,\n        'M': 1000000,\n        'B': 1000000000,\n        'T': 1000000000000\n    }\n    if not re.search(r'\\d+(?:\\.\\d+)?', text):\n        return None\n    value = re.findall(r'\\d+(?:\\.\\d+)?', text)[0]\n    unit = re.findall(r'[a-zA-Z]', text)[0]\n    return int(float(value) * switcher.get(unit, 1))\n</code></pre>"},{"location":"reference/reputation/","title":"Reputation","text":""},{"location":"reference/reputation/#reputation","title":"reputation","text":""},{"location":"reference/reputation/brand_equity/","title":"Brand equity","text":""},{"location":"reference/reputation/brand_equity/#reputation.brand_equity","title":"brand_equity","text":""},{"location":"reference/reputation/employer_ratings/","title":"Employer ratings","text":""},{"location":"reference/reputation/employer_ratings/#reputation.employer_ratings","title":"employer_ratings","text":""},{"location":"reference/reputation/esg_rankings/","title":"Esg rankings","text":""},{"location":"reference/reputation/esg_rankings/#reputation.esg_rankings","title":"esg_rankings","text":""},{"location":"reference/reputation/negative_press/","title":"Negative press","text":""},{"location":"reference/reputation/negative_press/#reputation.negative_press","title":"negative_press","text":""}]}